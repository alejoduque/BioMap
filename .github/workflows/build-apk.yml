name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Verify Node.js version
      run: |
        node --version
        npm --version
        which node
        which npm
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Capacitor CLI globally
      run: npm install -g @capacitor/cli@latest
    
    - name: Build web app
      run: npm run build
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        sdk-platform: '34'
        sdk-build-tools: '34.0.0'
    
    - name: Configure Java environment
      run: |
        echo "JAVA_HOME: $JAVA_HOME"
        echo "ANDROID_HOME: $ANDROID_HOME"
        java -version
        which java
    
    - name: Sync Capacitor
      run: |
        node --version
        cap --version
        cap sync
      env:
        PATH: ${{ env.PATH }}
    
    - name: Build APK
      run: |
        cd android
        echo "Using JAVA_HOME: $JAVA_HOME"
        echo "Clearing any local gradle properties..."
        unset ORG_GRADLE_JAVA_HOME || true
        echo "Checking for any gradle properties files..."
        find . -name "gradle.properties" -type f
        echo "Current gradle.properties content:"
        cat gradle.properties
        echo "Checking Java version that Gradle will use:"
        java -version
        echo "Checking if gradlew is executable:"
        ls -la gradlew
        echo "Running gradle with explicit Java home and more verbose output..."
        set +e  # Don't exit on error, let us capture the full output
        ./gradlew assembleDebug --stacktrace --info --debug -Dorg.gradle.java.home="$JAVA_HOME" 2>&1 | tee build.log
        BUILD_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "Build completed with exit code: $BUILD_EXIT_CODE"
        
        # Check if APK was actually generated despite exit code
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "SUCCESS: APK was generated successfully!"
          echo "APK size: $(ls -lh app/build/outputs/apk/debug/app-debug.apk)"
        else
          echo "=== BUILD FAILED ==="
          echo "APK was not generated. Last 100 lines of build log:"
          tail -100 build.log
          echo "=== END OF BUILD LOG ==="
          exit 1
        fi
      env:
        JAVA_HOME: ${{ env.JAVA_HOME }}
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ORG_GRADLE_JAVA_HOME: ""
    
    - name: Get Git revision and info
      id: git_rev
      run: |
        echo "rev=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "full_rev=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "commit_msg=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
        echo "Build Info:" >> build-info.txt
        echo "Git Revision: $(git rev-parse --short HEAD)" >> build-info.txt
        echo "Full Revision: $(git rev-parse HEAD)" >> build-info.txt
        echo "Commit Message: $(git log -1 --pretty=format:'%s')" >> build-info.txt
        echo "Build Date: $(date)" >> build-info.txt
        echo "Build URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> build-info.txt
    
    - name: Check APK output and rename
      run: |
        echo "Checking if APK was generated..."
        if [ ! -d "android/app/build/outputs/apk/debug" ]; then
          echo "ERROR: APK output directory does not exist!"
          echo "This means the build failed before APK generation."
          echo "Checking build directory structure:"
          find android -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          find android/app/build -type d 2>/dev/null || echo "No build directory found"
          exit 1
        fi
        
        if [ ! -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "ERROR: APK file not found!"
          echo "Contents of debug directory:"
          ls -la android/app/build/outputs/apk/debug/ || echo "Directory not accessible"
          exit 1
        fi
        
        echo "APK found, renaming with revision..."
        cd android/app/build/outputs/apk/debug
        mv app-debug.apk biomap-debug-${{ steps.git_rev.outputs.rev }}.apk
        echo "APK renamed successfully: biomap-debug-${{ steps.git_rev.outputs.rev }}.apk"
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: biomap-debug-${{ steps.git_rev.outputs.rev }}
        path: |
          android/app/build/outputs/apk/debug/biomap-debug-${{ steps.git_rev.outputs.rev }}.apk
          build-info.txt 